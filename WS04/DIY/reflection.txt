//===========================
//name:Jiwon Choi
//email:jchoi152@myseneca.ca
//student Id:154292197
//section:NCC
//Date:20211007
// I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
//===========================

Until the previous workshop, an object was created and a function named "Init Members" was defined and called for the purpose of initializing the object's member variables. Since the member variables were declared private for the purpose of concealing information, we were forced to use functions that were always cumbersome to initialize. However, with the introduction of the constructor, it is possible to initialize at the same time as the creation of the object without having to declare one by one. The constructor has the same name as the class and the function, and the return type is not declared and does not actually return. And the most important feature is that it is called only once when an object is created. That is, it is impossible to call a generator other than object generation. When using the generator in this workshop, it was concise and the readability of the code was high. There is a constructor that is necessarily called when creating an object, and there is an extinguisher that is necessarily called when the object is destroyed. The extinction is preceded by ~ (tilde) in the name of the class. Like the constructor, the return type is not declared, and it is not actually returned. And one of the new concepts learned in this workshop is "this" pointer. This pointer is a pointer referring to an object. Therefore, it is useful to write when accessing member variables of an object. And during this workshop, I could feel that the codes changed a lot, it was more and more different from the c language I learned during the IPC.